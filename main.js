!function(){"use strict";class e{constructor(e,t,s){this._cardTitle=e.name,this._cardLink=e.link,this._cardSelector=t,this._handleCardClick=s,this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".gallery__card-image"),this._cardLikeButton=this._cardElement.querySelector(".gallery__card-button"),this._cardDeleteButton=this._cardElement.querySelector(".gallery__delete-card")}_deleteGalleryCard(e){e.target.closest(".gallery__card").remove()}_handleImageClick(){this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._cardLink,this._cardTitle)}))}_handleCardDeleteButton(){this._cardDeleteButton.addEventListener("click",this._deleteGalleryCard)}_handleCardLikeButton(){this._cardLikeButton.addEventListener("click",(e=>{e.target.classList.toggle("gallery__card-button_active")}))}_setEventListeners(){this._handleImageClick(),this._handleCardDeleteButton(),this._handleCardLikeButton()}_getTemplate(){return document.querySelector(this._cardSelector).content.cloneNode(!0)}generateCard(){return this._cardImage.setAttribute("src",this._cardLink),this._cardImage.setAttribute("alt",this._cardTitle),this._cardElement.querySelector(".gallery__card-title").textContent=this._cardTitle,this._setEventListeners(),this._cardElement}}class t{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_active"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keyup",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}))}}class s extends t{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popupElement.querySelector(".form"),this._submitButton=this._form.querySelector("button"),this._inputs=[...this._form.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.name,r=t.value;e[s]=r})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._submitHandler(t)}))}close(){super.close(),this._form.reset()}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e,t){r(this,"_showInputError",((e,t)=>{const s=this._element.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)})),r(this,"_hideInputError",(e=>{const t=this._element.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)})),r(this,"_isValid",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),r(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),r(this,"resetValidation",(()=>{this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))})),r(this,"_toggleButtonState",(()=>{this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","")):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))})),r(this,"_setEventListeners",(()=>{this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleButtonState()}))}))})),r(this,"enableValidation",(()=>{this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()})),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t,this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector)),this._buttonElement=this._element.querySelector(this._submitButtonSelector)}}const i={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"},o=profilePopup.querySelector(".form"),l=newPlacePopup.querySelector(".form"),a=document.getElementById("newPlaceButton"),c=document.querySelector(".profile__open-button"),u=document.querySelector(".gallery__container"),d=document.getElementById("name"),_=document.getElementById("job"),h=new class{constructor(e,t){this._profile=document.querySelector(t),this._profileName=this._profile.querySelector(e.userNameSelector),this._profileJob=this._profile.querySelector(e.userJobSelector)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}}({userNameSelector:".profile__name",userJobSelector:".profile__description"},".profile__info"),p=new s("#newPlacePopup",(e=>{b({name:e.cardTitle,link:e.cardLink},u),p.close()}),i),m=new s("#profilePopup",(e=>{h.setUserInfo(e.name,e.job),m.close()}),i),E=new class extends t{open(e,t){super.open();const s=this._popupElement.querySelector("img"),r=this._popupElement.querySelector("p");s.src=e,s.alt=t,r.textContent=t}}("#bigPicturePopup");E.setEventListeners(),p.setEventListeners(),m.setEventListeners(),a.addEventListener("click",(()=>{y.resetValidation(),p.open()})),c.addEventListener("click",(()=>{var e;e=h.getUserInfo(),d.value=e.name,_.value=e.job,m.open()}));const b=t=>{const s=(t=>new e(t,"#galleryCard",((e,t)=>{E.open(e,t)})))(t);g.addItem(s.generateCard())},g=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:b},".gallery__container");g.renderItems();const v=new n(i,o),y=new n(i,l);v.enableValidation(),y.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,