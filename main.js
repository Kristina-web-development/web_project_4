!function(){"use strict";class e{constructor(e,t,s,r,i){this._cardTitle=e.name,this._cardLink=e.link,this._cardLikes=e.likes,this._id=e._id,this._owner=e.owner,this._userId=e.userId,this._cardSelector=t,this._handleCardClick=s,this._handleCardLikeClick=i,this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".gallery__card-image"),this._cardLikeButton=this._cardElement.querySelector(".gallery__card-button"),this._cardDeleteButton=this._cardElement.querySelector(".gallery__delete-card"),this._cardLikesCounter=this._cardElement.querySelector(".gallery__card-likes-counter"),this._deleteCardConfirmation=r}_setCardLikes(){this._cardLikes&&(this._cardLikesCounter.textContent=this._cardLikes.length),this.hasLikes()?this._cardLikeButton.classList.add("gallery__card-button_active"):this._cardLikeButton.classList.remove("gallery__card-button_active")}_handleLike(e){this._handleCardLikeClick(this._id)}hasLikes(){return!!this._cardLikes&&this._cardLikes.length>0}isLiked(e){return!!this._cardLikes&&this._cardLikes.find((t=>t._id===e))}updateLikes(e){this._cardLikes=e,this._setCardLikes()}_deleteGalleryCard(e){e.target.closest(".gallery__card").remove()}_handleImageClick(){this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._cardLink,this._cardTitle)}))}_handleCardDeleteButton(){this._cardDeleteButton.addEventListener("click",this._deleteCardConfirmation)}_handleCardLikeButton(){this._cardLikeButton.addEventListener("click",(e=>{this._handleLike(e),e.target.classList.toggle("gallery__card-button_active")}))}_setEventListeners(){this._handleImageClick(),this._handleCardDeleteButton(this._id),this._handleCardLikeButton(this._id)}_getTemplate(){return document.querySelector(this._cardSelector).content.cloneNode(!0)}removeCard(){document.getElementById(this._id).closest(".gallery__card").remove()}generateCard(){return this._cardImage.setAttribute("src",this._cardLink),this._cardImage.setAttribute("alt",this._cardTitle),this._cardImage.setAttribute("id",this._id),this._cardElement.querySelector(".gallery__card-title").textContent=this._cardTitle,this._setCardLikes(this._cardLikes),this._setEventListeners(),this._owner._id!==this._userId&&this._cardDeleteButton.remove(),this._cardElement}}class t{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_active"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keyup",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}))}}class s extends t{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popupElement.querySelector(".form"),this._submitButton=this._form.querySelector("button"),this._inputs=[...this._form.querySelectorAll(".form__input")],this._buttonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.name,r=t.value;e[s]=r})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._submitHandler(t)}))}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._buttonText}close(){super.close(),this._form.reset()}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e,t){r(this,"_showInputError",((e,t)=>{const s=this._element.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)})),r(this,"_hideInputError",(e=>{const t=this._element.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)})),r(this,"_isValid",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),r(this,"_hasInvalidInput",(e=>e.some((e=>!e.validity.valid)))),r(this,"resetValidation",(()=>{this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))})),r(this,"_toggleButtonState",(()=>{this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","")):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))})),r(this,"_setEventListeners",(()=>{this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleButtonState()}))}))})),r(this,"enableValidation",(()=>{this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()})),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t,this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector)),this._buttonElement=this._element.querySelector(this._submitButtonSelector)}}const n={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"},a=document.querySelector("form[name=avatarProfileForm]"),o=profilePopup.querySelector(".form"),l=newPlacePopup.querySelector(".form"),d=document.getElementById("newPlaceButton"),c=document.querySelector(".profile__open-button"),h=(document.querySelector(".gallery__container"),document.getElementById("name")),_=document.getElementById("job"),u=(document.querySelector(".profile__image_container > img"),document.querySelector(".profile__image_container")),m=t=>{const s=(t=>{t.userId=p.getUserInfo()._id;const s=new e(t,"#galleryCard",((e,t)=>{E.open(e,t)}),(e=>{b.open(),b.setAction((()=>{b.renderLoading(!0),S.deleteCard(s._id).then((()=>{s.removeCard(),b.close()})).catch((e=>{console.log(e)})).finally((()=>{b.renderLoading(!1)}))}))}),(e=>{s.isLiked(p.getUserInfo()._id)?S.removeLikeCard(e).then((e=>{s.updateLikes(e.likes)})).catch((e=>{console.log(e)})):S.addLikeCard(e).then((e=>{s.updateLikes(e.likes)})).catch((e=>{console.log(e)}))}));return s})(t);L.addItem(s.generateCard())},p=new class{constructor(e,t){this._profile=document.querySelector(t),this._profileName=this._profile.querySelector(e.userNameSelector),this._profileJob=this._profile.querySelector(e.userJobSelector),this._profileAvatar=document.querySelector(e.userAvatarSelector),this._profileId=""}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent,avatar:this._profileAvatar.src,_id:this._profileId}}setUserInfo(e,t,s){this._profileName.textContent=e,this._profileJob.textContent=t,this._profileId=s}setUserAvatar(e){this._profileAvatar.setAttribute("src",e.avatarLink)}}({userNameSelector:".profile__name",userJobSelector:".profile__description",userAvatarSelector:".profile__image"},".profile__info"),L=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._temporaryStorage=[],this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addNewItems(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this._temporaryStorage=[...e],this._temporaryStorage.forEach((e=>{this._renderer(e)})),this._items=[...this._items,...this._temporaryStorage],this._temporaryStorage=[]}addItem(e){this._container.prepend(e)}}({items:[],renderer:m},".gallery__container"),g=new s("#newPlacePopup",(e=>{g.renderLoading(!0),S.addCard({title:e.cardTitle,image:e.cardLink}).then((e=>{m({name:e.name,link:e.link,_id:e._id,owner:e.owner,userId:p.getUserInfo()._id},g.close())})).catch((e=>{console.log(e)})).finally((()=>{g.renderLoading(!1)}))}),n),f=new s("#profilePopup",(e=>{f.renderLoading(!0),S.addUserInfo(e).then((e=>{p.setUserInfo(e.name,e.about,e._id),f.close()})).catch((e=>{console.log(e)})).finally((()=>{f.renderLoading(!1)}))}),n),v=new s("#avatarProfilePopup",(e=>{v.renderLoading(!0),S.addUserAvatar(e).then((()=>{p.setUserAvatar(e),v.close()})).catch((e=>{console.log(e)})).finally((()=>{v.renderLoading(!1)}))}),n),b=new class extends t{constructor(e){super(e),this._form=this._popupElement.querySelector(".form"),this._submitButton=this._form.querySelector("button"),this._buttonText=this._submitButton.textContent}setAction(e){this._handleSubmit=e}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(),super.close()})),super.setEventListeners()}renderLoading(e){this._submitButton.textContent=e?"Deleting...":this._buttonText}}("#deleteCardPopup"),E=new class extends t{open(e,t){super.open();const s=this._popupElement.querySelector("img"),r=this._popupElement.querySelector("p");s.src=e,s.alt=t,r.textContent=t}}("#bigPicturePopup");E.setEventListeners(),g.setEventListeners(),f.setEventListeners(),v.setEventListeners(),b.setEventListeners(),d.addEventListener("click",(()=>{k.resetValidation(),g.open()})),c.addEventListener("click",(()=>{var e;e=p.getUserInfo(),h.value=e.name,_.value=e.job,f.open()})),u.addEventListener("click",(()=>{v.open()}));const C=new i(n,o),k=new i(n,l),y=new i(n,a);C.enableValidation(),k.enableValidation(),y.enableValidation();const S=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addUserAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatarLink})})}addUserInfo(e){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.job})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}getCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addCard(e){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.image})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers})}addLikeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}removeLikeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{Authorization:"cd2997d4-0d31-42a2-a383-a9a3b826db8e","Content-Type":"application/json"}});Promise.all([S.getUserInfo(),S.getCards()]).then((e=>{let[t,s]=e;const r=t._id,{avatar:i,name:n,about:a}=t,o={avatarLink:i};console.log(t),p.setUserInfo(n,a,r),p.setUserAvatar(o),L.addNewItems(s)})).catch((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,